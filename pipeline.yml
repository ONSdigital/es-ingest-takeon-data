---
resource_types:
  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource

resources:
  - name: repository
    type: pull-request
    check_every: 24h
    webhook_token: ((webhook_token-concourse))
    icon: github-circle
    source:
      repository: ONSdigital/es-ingest-takeon-data
      access_token: ((git_access_token))

  - name: deploy-repository
    type: git
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      uri: https://github.com/ONSdigital/es-ingest-takeon-data.git
      branch: lu_3857_vpc_creds

  - name: base-python-image
    type: docker-image
    icon: language-python
    source:
      repository: python
      tag: 3.7-slim

  - name: ecr-image-upload
    type: docker-image
    icon: docker
    source:
      repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
      aws_access_key_id: ((ecr-svcaccount.api-key))
      aws_secret_access_key: ((ecr-svcaccount.api-secret))

jobs:
  - name: installing dependencies
    serial: true
    plan:

      - get: repository
        trigger: true

      - get: base-python-image
        params:
          save: true

      - put: ecr-image-upload
        params:
          load_base: base-python-image
          build: repository

  - name: linting & tests
    plan:

      - get: repository
        trigger: true
        passed: [installing dependencies]
        version: every

      - put: repository
        params:
          path: repository
          status: success

      - in_parallel:
          - task: aws-tests
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    cd repository
                    PYTHONPATH=$(pwd)/repository pytest
            on_failure:
              put: repository
              params:
                path: repository
                status: failure
                description: Failing tests are present

          - task: flake8
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    flake8 $(pwd)/repository
            on_failure:
              put: repository
              params:
                path: repository
                status: failure
                description: Code standards are not met

  - name: serverless-deploy
    plan:
      - get: deploy-repository
        trigger: true
      - task: obtaining-vpc-details
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: mesosphere/aws-cli
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            AWS_DEFAULT_REGION: eu-west-2
            SLS_DEBUG: 1
            TERM: xterm
          inputs:
            - name: deploy-repository
          run:
            path: sh
            args:
              - -ec
              - |
                aws ec2 describe-subnets --filters Name=tag:Name,Values=results-tf-sub-public-\* --subnet-ids --output json > subnets_output.json
          outputs:
            - name: subnets

      - task: serverless-aws
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
              aws_access_key_id: ((ecr-svcaccount.api-key))
              aws_secret_access_key: ((ecr-svcaccount.api-secret))
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            SLS_DEBUG: 1
          inputs:
            - name: deploy-repository
            - name: subnets
          run:
            path: deploy-repository/serverless.sh
            